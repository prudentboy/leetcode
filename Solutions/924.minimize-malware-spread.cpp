/*
 * @lc app=leetcode id=924 lang=cpp
 *
 * [924] Minimize Malware Spread
 */

// @lc code=start
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        if (initial.size() == 1) { return initial.front(); }

        sort(initial.begin(), initial.end());

        int ans(-1), mn(INT_MAX), n(graph.size());

        function<int(int)> infectedCnt = [&](int node) -> int {
            vector<bool> visited(n, false);
            queue<int> q;

            for (int i(0); i < initial.size(); ++i) {
                if (initial[i] == node) { continue; }
                q.push(initial[i]);
                visited[initial[i]] = true;
            }

            while (!q.empty()) {
                int tmp(q.front());
                q.pop();
                for (int j(0); j < n; ++j) {
                    if (graph[tmp][j] == 0 || visited[j]) { continue; }
                    visited[j] = true;
                    q.push(j);
                }
            }

            int ret(0);
            for (int i(0); i < n; ++i) { if (visited[i]) { ++ret; } }

            return ret;
        };

        int cnt(0);
        for (int node : initial) {
            cnt = infectedCnt(node);
            if (cnt < mn) {
                mn = cnt;
                ans = node;
            }
        }

        return ans;
    }
};
// @lc code=end

