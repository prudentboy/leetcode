class Solution1
{
public:
    vector<int> twoSum(vector<int>& nums, int target)
    {
        vector<int> opt = {-1,-1};
        for (int i = 0; i < nums.size(); ++i)
            for (int j = i + 1; j < nums.size(); ++j)
            {
                if (nums[i] + nums[j] == target)
                {
                    opt[0] = i;
                    opt[1] = j;
                }
            }
        return opt;
    }
};

class Solution2 {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> m;
        for (int i(0); i < nums.size(); ++i) m[nums[i]] = i;
        for (int i(0); i < nums.size(); ++i)
        {
            if (m.find(target - nums[i]) != m.end() and m[target - nums[i]] != i)
            {
                return {i, m[target - nums[i]]};
            }
        }
        return {-1, -1};
    }
};
